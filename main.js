!function(){"use strict";class e{constructor(e,t){this._formElement=t,this._inputSelector=e.inputSelector,this._savebuttonSelector=e.saveButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_toggleInputError(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}resetValidation(){this._inputList.forEach((e=>{this._toggleInputError(e)}))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(".popup__save"),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputError(e),this.toggleButtonState(this._buttonElement)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t){let{data:r,handleImageClick:s,handleDeleteConfirmation:i,confirmationFunction:n,handleLikeFunction:o,onLoadLikeCheck:a}=e;this._title=r.name,this._image=r.link,this._likeAmount=r.likes,this._cardOwnerId=r.owner._id,this._cardId=r._id,this._templateSelector=t,this._handleImageClick=s,this._handleDeleteConfirmation=i,this._confirmationFunction=n,this._handleLikeFunction=o,this._onLoadLikeCheck=a}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}removeCard(){this._element.remove()}likeNumberCheck(e){Number(e?++this._likeNumber.textContent:--this._likeNumber.textContent)}generateCard(){return this._element=this._getTemplate(),this._setEventHandlers(),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._likeNumber=this._element.querySelector(".card__like-number"),this._trash=this._element.querySelector(".card__trash"),this._likeButton=this._element.querySelector(".card__like"),this._onLoadLikeCheck(this._likeAmount,this._likeButton),this._likeNumber.textContent=this._likeAmount.length,"5b91ece1271e0a8558fbe8e0"===this._cardOwnerId&&this._trash.classList.add("card__trash_opened"),this._cardImage.src=this._image,this._cardImage.alt=`Photo of ${this._title}`,this._cardTitle.textContent=this._title,this._element}_setEventHandlers(){this._element.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick({title:this._title,image:this._image})})),this._element.querySelector(".card__like").addEventListener("click",(()=>{this._handleLikeFunction(this._cardId,this._likeButton)})),this._element.querySelector(".card__trash").addEventListener("click",(()=>{this._confirmationFunction(this._cardId)}))}}class r{constructor(e){var t,r,s;t=this,s=e=>{"Escape"===e.key&&this.close()},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_handleEscClose"))in t?Object.defineProperty(t,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[r]=s,this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleClickClose(e){e.target===e.currentTarget&&this.close()}setEventListeners(){this._popup.querySelector(`#${this._popup.id}-close`).addEventListener("click",this.close.bind(this)),this._popup.addEventListener("mousedown",this._handleClickClose.bind(this))}}function s(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class i extends r{constructor(e,t){super(e),s(this,"open",(e=>{e&&this._inputList.forEach((e=>{e.value="Loading..."})),super.open()})),s(this,"close",(()=>{super.close(),setTimeout((()=>{this._form.reset()}),500)})),this._submitFunction=t,this._form=this._popup.querySelector(".popup__form"),this._inputList=this._popup.querySelectorAll(".popup__input"),this._saveButton=this._popup.querySelector(".popup__save")}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setSubmitAction(e){this._submitFunction=e}isLoading(){this._saveButton.textContent="Saving..."}finishLoading(){setTimeout((()=>{this._saveButton.textContent="Save"}),500)}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._submitFunction(this._getInputValues())})),super.setEventListeners()}}class n{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=t}addItem(e){this._container.prepend(this._renderer(e))}renderItems(e){e.forEach((e=>{this._container.append(this._renderer(e))}))}}const o=document.querySelector(".main"),a=o.querySelector(".popup"),l=a.querySelector("#editForm"),c=a.querySelector("#addForm"),u=a.querySelector("#profilePictureForm"),h=o.querySelector(".cards"),_=o.querySelector(".profile"),d=_.querySelector(".profile__edit"),p=_.querySelector(".profile__add"),m=_.querySelector(".profile__image"),v=a.querySelector("#inputName"),f=a.querySelector("#inputDesc"),g=_.querySelector(".profile__title"),E=_.querySelector(".profile__subtitle"),b=_.querySelector(".profile__image"),L=_.querySelector(".profile__picture"),y={formSelector:".popup__form",inputSelector:".popup__input",saveButtonSelector:".popup__save",inactiveButtonClass:"popup__save_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},k=new e(y,l),S=new e(y,c),C=new e(y,u),I=new class extends r{constructor(e){super(e),this._title=this._popup.querySelector(".popup__title"),this._image=this._popup.querySelector(".popup__image")}open(e){this._title.textContent=e.title,this._image.src=e.image,this._image.alt=`An image of ${e.title}.`,super.open()}}("#imagePopup"),q=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_promiseThing(e,t){return Promise.all(e,t)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.imageLink})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updatePfp(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"3e3670e4-89e4-4b74-ac18-c98464206840","Content-Type":"application/json"}}),P=new class{constructor(e){let{nameElem:t,jobElem:r}=e;this._nameElem=t,this._jobElem=r}getUserInfo(){return info={name:this._nameElem.textContent,about:this._jobElem.textContent}}setUserInfo(e){let{name:t,about:r}=e;this._nameElem.textContent=t,this._jobElem.textContent=r}}({nameElem:g,jobElem:E});q.getUserInfo().then((e=>{P.setUserInfo(e),b.style.backgroundImage=`url(${e.avatar})`})).catch((e=>{console.log(e)})),q.getInitialCards().then((e=>{const r=new n({initialCards:e,renderer:e=>{const r=new t({data:e,handleImageClick:e=>{I.open(e)},confirmationFunction:e=>{j.open(),j.setSubmitAction((()=>{q.deleteCard(e).then((()=>{r.removeCard()}))}))},handleLikeFunction:(e,t)=>{t.classList.contains("card_like_activate")?q.removeLike(e).then((()=>{t.classList.remove("card_like_activate"),r.likeNumberCheck(!1)})).catch((e=>{console.log(e)})):q.addLike(e).then((()=>{t.classList.add("card_like_activate"),r.likeNumberCheck(!0)})).catch((e=>{console.log(e)}))},onLoadLikeCheck:(e,t)=>{e.forEach((e=>{"5b91ece1271e0a8558fbe8e0"===e._id&&t.classList.add("card_like_activate")}))}},"#card");return r.generateCard()}},h),s=new i("#addPopup",(e=>{s.isLoading(),q.addNewCard(e).then((e=>{console.log(e),r.addItem(e)})).catch((e=>{console.log(e)})).finally((()=>{s.finishLoading(),s.close()}))}));s.setEventListeners(),p.addEventListener("click",(()=>{s.open(!1),S.toggleButtonState()})),r.renderItems(e)})).catch((e=>{console.log(e)}));const j=new class extends r{constructor(e){super(e),this._confirmButton=this._popup.querySelector("#certaintyConfirm")}setSubmitAction(e){this._submitFunction=e}setEventListeners(){this._confirmButton.addEventListener("click",(()=>{this._submitFunction(),this.close()})),super.setEventListeners()}}("#certaintyPopup");j.setEventListeners();const w=new i("#editPopup",(e=>{w.isLoading(),q.getUserInfo().then((t=>{P.setUserInfo(t),P.setUserInfo(e)})).catch((e=>{console.log(e)})).finally((()=>{w.finishLoading(),w.close()})),q.setUserInfo(e)}));w.setEventListeners();const $=new i("#profilePicturePopup",(e=>{$.isLoading(),q.updatePfp(e.avatar).then((()=>{b.style.backgroundImage=`url(${e.avatar})`})).catch((e=>{console.log(e)})).finally((()=>{$.finishLoading(),$.close()}))}));$.setEventListeners(),d.addEventListener("click",(()=>{w.open(!0),q.getUserInfo().then((e=>{v.value=e.name,f.value=e.about,k.toggleButtonState(),k.resetValidation()}))})),m.addEventListener("mouseover",(()=>{L.classList.add("profile__picture_active")})),m.addEventListener("mouseout",(()=>{L.classList.remove("profile__picture_active")})),m.addEventListener("click",(()=>{$.open(!1),C.toggleButtonState()})),I.setEventListeners(),k.enableValidation(),S.enableValidation(),C.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,